name: IPA Class-Dump and Swift-Dump Analysis

on:
  workflow_dispatch:  # 允许手动触发工作流
  schedule:
    - cron: '0 0 * * 0'  # 每周日午夜运行一次（可选）

jobs:
  analyze-ipa:
    runs-on: macos-latest  # 使用 macOS 运行器，因为需要 macOS 特定工具
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install required tools
      run: |
        # 安装 class-dump
        brew install class-dump
        
        # 安装 SwiftDump (Python 工具)
        pip3 install swift-dump
        
        # 安装其他依赖
        pip3 install requests
        brew install lipo
        brew install nm
        
    - name: Download IPA file
      run: |
        echo "Downloading IPA from https://raw.githubusercontent.com/Alex0510/Eric/raw/refs/heads/master/ipa/App.ipa"
        curl -L -o app.ipa "https://raw.githubusercontent.com/Alex0510/Eric/raw/refs/heads/master/ipa/App.ipa"
        
        # 检查文件是否下载成功
        if [ ! -f "app.ipa" ]; then
          echo "Error: Failed to download IPA file"
          exit 1
        fi
        
        # 检查文件类型
        file app.ipa
        
    - name: Create output directory
      run: |
        mkdir -p output
        
    - name: Extract and analyze IPA
      run: |
        # 创建临时目录
        TEMP_DIR=$(mktemp -d)
        echo "Using temp directory: $TEMP_DIR"
        
        # 解压 IPA
        echo "Extracting IPA..."
        unzip -q app.ipa -d "$TEMP_DIR"
        
        # 查找 .app 包
        APP_BUNDLE=$(find "$TEMP_DIR" -name "*.app" -type d | head -n 1)
        if [ -z "$APP_BUNDLE" ]; then
          echo "Error: No .app bundle found"
          exit 1
        fi
        
        echo "Found app bundle: $APP_BUNDLE"
        
        # 查找主二进制文件
        BINARY_NAME=$(defaults read "$APP_BUNDLE/Info.plist" CFBundleExecutable)
        BINARY_PATH="$APP_BUNDLE/$BINARY_NAME"
        
        if [ ! -f "$BINARY_PATH" ]; then
          echo "Error: No executable found"
          exit 1
        fi
        
        echo "Found executable: $BINARY_NAME"
        
        # 检查二进制文件架构
        echo "Checking binary architectures..."
        ARCHS=$(lipo -info "$BINARY_PATH")
        echo "Architectures: $ARCHS"
        
        # 创建输出目录
        mkdir -p output/Objective-C
        mkdir -p output/Swift
        mkdir -p output/Metadata
        
        # 复制 Info.plist 和其它元数据
        cp "$APP_BUNDLE/Info.plist" output/Metadata/
        plutil -convert xml1 output/Metadata/Info.plist
        
        # 执行 class-dump (Objective-C)
        echo "Running class-dump..."
        if command -v class-dump &> /dev/null; then
          class-dump -H -o output/Objective-C "$BINARY_PATH" || echo "class-dump failed or no Objective-C classes found"
        else
          echo "class-dump not available"
        fi
        
        # 执行 Swift 符号提取
        echo "Extracting Swift symbols..."
        if command -v swift-dump &> /dev/null; then
          swift-dump "$BINARY_PATH" > output/Swift/swift_symbols.txt 2>/dev/null || echo "swift-dump failed"
        else
          echo "swift-dump not available, using nm instead"
          nm --demangle "$BINARY_PATH" | grep -E "Swift|_T0" > output/Swift/swift_symbols.txt 2>/dev/null || echo "nm failed"
        fi
        
        # 提取其他信息
        echo "Extracting framework references..."
        strings "$BINARY_PATH" | grep -E "UIKit|Foundation|Swift|CoreData|CoreGraphics" > output/frameworks_references.txt
        
        # 提取所有字符串（可选，可能很大）
        echo "Extracting all strings..."
        strings "$BINARY_PATH" > output/all_strings.txt 2>/dev/null || echo "strings extraction failed"
        
        # 使用 otool 提取加载命令信息
        echo "Extracting load commands..."
        otool -l "$BINARY_PATH" > output/load_commands.txt 2>/dev/null || echo "otool failed"
        
        # 清理临时文件
        rm -rf "$TEMP_DIR"
        
    - name: Package results
      run: |
        # 创建带有时间戳的归档文件
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        ARCHIVE_NAME="analysis_results_$TIMESTAMP.zip"
        zip -r "$ARCHIVE_NAME" output/
        
    - name: Upload results as artifact
      uses: actions/upload-artifact@v4  # 更新到 v4 版本
      with:
        name: ipa-analysis-results
        path: analysis_results_*.zip
        
    - name: Clean up
      run: |
        rm -rf output app.ipa analysis_results_*.zip
        
    - name: Create summary report
      run: |
        # 创建简单的摘要报告
        echo "# IPA Analysis Summary" > summary.md
        echo "## Analysis Date: $(date)" >> summary.md
        echo "## IPA URL: https://raw.githubusercontent.com/Alex0510/Eric/raw/refs/heads/master/ipa/App.ipa" >> summary.md
        echo "" >> summary.md
        
        # 如果有 Objective-C 头文件，统计数量
        if [ -d "output/Objective-C" ]; then
          OBJC_COUNT=$(find output/Objective-C -name "*.h" | wc -l | tr -d ' ')
          echo "## Objective-C Headers: $OBJC_COUNT" >> summary.md
        fi
        
        # 如果有 Swift 符号，统计行数
        if [ -f "output/Swift/swift_symbols.txt" ]; then
          SWIFT_COUNT=$(wc -l < output/Swift/swift_symbols.txt | tr -d ' ')
          echo "## Swift Symbols: $SWIFT_COUNT" >> summary.md
        fi
        
    - name: Upload summary
      uses: actions/upload-artifact@v4  # 更新到 v4 版本
      with:
        name: analysis-summary
        path: summary.md
